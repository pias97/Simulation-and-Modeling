# -*- coding: utf-8 -*-
"""Problem1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/102JP8E2ORez5F4vuyvlSIeuTxITaT-uV

#Library
"""

import random
import math
from math import exp
import matplotlib.pyplot as plt

"""#Main Segment"""

random.seed(20)
n=[100,1000,5000,10000]
a=0
b=1
error_array=[]
for trials in n:
  func_sum=0 # f_avg
  func_square_sum=0 # f_square_avg

  for i in range(trials):
    #randomly pick a value of x between a and b
     x= random.uniform(a,b)
    #find f(x) value
    # x2 e-xln(x+2)
     #h= pow(x,2)*pow(math.e, -x)*math.log(x+2)
     h = (x**2)*math.exp(-x)*math.log(x+2)
    #func_sum update
     func_sum += h
     func_square_sum += (h**2)
    #func_squared_sum update
  
  func_average=func_sum/trials
  func_squared_average=func_square_sum/trials
  print(func_average, func_squared_average, " :: err")
  integral_value=func_average*(b-a) 
 
  error=((b-a)/math.sqrt(trials))*(math.sqrt(func_squared_average - (func_average**2) ))
  error_array.append(error)
  print("For number of points= ", trials)
  print("Integral value: ",integral_value)
  print("Error:", error)
  print("")

"""#Bar Plot"""

x2=["100", "1000", "5000", "10000"]
plt.bar(x2,error_array,color="green")
plt.xlabel("Value of n")
plt.ylabel("Error estimate")
plt.show()

