# -*- coding: utf-8 -*-
"""011171288.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R8_PbsTv2syAEP2rHWgrztfdhxuHZAFM
"""

import numpy as np
np.random.seed(10)

class SSQ():
    def __init__(self):
        
        self.interarrivals = list(np.abs(np.random.normal(loc=2, scale=1, size=110)))
        self.service_times = list(np.random.uniform(low=3,high=4, size=100))

        print(self.interarrivals)
        print(self.service_times)

        self.clock = 0.0

        self.next_arrival = self.interarrivals.pop(0)
        self.next_departure = float('inf')

        self.num_in_queue = 0
        self.times_of_arrivalqueue = []
        self.service_times_in_queue = []

        self.total_delay = 0.0
        self.customer_in_queue = 0.0
        self.utilization = 0.0
        self.num_of_delays = 0.0

        self.server_status = 0 # initially idle
        self.last_event_time = 0.0

        self.choice = 0

    def arrival(self):
        self.next_arrival = self.next_arrival + self.interarrivals.pop(0)
        Q= len(self.times_of_arrivalqueue)
        self.customer_in_queue += Q
        if self.server_status == 0: #server idle
            self.server_status = 1
            delay = 0.0
            self.total_delay += delay
            self.num_of_delays += 1
            self.next_departure = self.clock + self.service_times.pop(0)

        else:
            self.num_in_queue += 1
            self.times_of_arrivalqueue.append(self.clock)
            self.service_times_in_queue.append(self.service_times.pop(0))


    def departure(self):
        if self.num_in_queue == 0:
            self.server_status = 0
            next_departure = float('inf')
        else:
          self.num_in_queue-=1
          self.num_of_delays+=1
          if self.value == 1:
            arrival = self.times_of_arrivalqueue.pop(0) # FIFO
            delay = self.clock-arrival
            self.total_delay += delay
            self.next_departure = self.clock + self.service_times_in_queue.pop(0)

          elif self.value == 2:
            i=len(self.times_of_arrivalqueue)
            arrival= self.times_of_arrivalqueue.pop(i-1)
            delay = self.clock-arrival
            self.total_delay += delay
            self.next_departure = self.clock + self.service_times_in_queue.pop()

          elif self.value == 3:
            i=self.service_times_in_queue.index(min(self.service_times_in_queue))
            arrival = self.times_of_arrivalqueue.pop(i) # SJF
            delay = self.clock-arrival
            self.total_delay += delay
            self.next_departure = self.clock + self.service_times_in_queue.pop(i)

    def simulate_next_event(self):
        self.clock = min(self.next_arrival, self.next_departure)
        self.last_event_time = self.clock

        if self.next_arrival<=self.next_departure:
            self.arrival()
            print("arrival at -> " + str(self.clock))
        
        else:
            self.departure()
            print("departure at -> " + str(self.clock))
        
        print("Server status: ", self.server_status)
        print("Times of arrival in the queue: ", self.times_of_arrivalqueue)
        print("Service times in the queue: ", self.service_times_in_queue)
        print("Total delay: ", self.total_delay)
        print("Next arrival : ", self.next_arrival)
        print("Next departure: ", self.next_departure)
        
    def calculation(self):
      Avg_delay=self.total_delay/self.num_of_delays
      Exp_Num_Customers_Q=self.customer_in_queue/50
      #Utilization=#cal
      print("Avarage delay : "+str(Avg_delay))
      print("Expected Number of Customers in the queue : "+str(Exp_Num_Customers_Q))
      #print("Expected Utilization of the server : "+str(Utilization))
      print("------------------------------------------------------------------------")    


    def start(self, val):
      self.value=int(val)
      while self.num_of_delays < 50:
        self.simulate_next_event()
      self.calculation()


s = SSQ()

print("1.FIFO")
print("2.LIFO")
print("3.SJF")
print("Enter Queue Policy")
choice=input()
s.start(choice)